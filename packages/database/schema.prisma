generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  nickname      String?
  avatar        String?
  language      String    @default("ar")
  workType      String?
  preferences   Json?
  plan          Plan      @default(FREE)
  stripeId      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  chats         Chat[]
  integrations  Integration[]
  files         File[]
  
  @@map("users")
}

model Chat {
  id          String    @id @default(cuid())
  title       String
  userId      String
  model       AIModel   @default(CLAUDE_SONNET)
  messages    Message[]
  isStarred   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("chats")
}

model Message {
  id        String      @id @default(cuid())
  chatId    String
  role      MessageRole
  content   String
  metadata  Json?
  createdAt DateTime    @default(now())
  
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model Integration {
  id          String           @id @default(cuid())
  userId      String
  type        IntegrationType
  isEnabled   Boolean          @default(false)
  credentials Json?
  settings    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, type])
  @@map("integrations")
}

model File {
  id        String   @id @default(cuid())
  userId    String
  filename  String
  mimetype  String
  size      Int
  url       String
  content   String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("files")
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum AIModel {
  GPT4
  GPT4_TURBO
  CLAUDE_OPUS
  CLAUDE_SONNET
  DEEPSEEK_CODER
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum IntegrationType {
  GMAIL
  GOOGLE_DRIVE
  GOOGLE_CALENDAR
  STRIPE
  GITHUB
  NOTION
  APPLE_NOTES
  INTERCOM
}
